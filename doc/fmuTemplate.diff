1a2,16
>  * Original code of fmuTemplateT_.c is fmuTemplate.c, which is included in
>  * the FMU SDK 2.0.4, provided by QTronic.
>  * ( https://www.qtronic.de/en/fmusdk.html )
>  * Modifications from original code have been made by Amane Tanaka.
>  *   
>  * Original Code:
>  * Copyright (c) 2008-2014, QTronic GmbH. All rights reserved.
>  * The FmuSdk is licensed by the copyright holder under the BSD License  
>  *  
>  * Modlifications:  
>  * Modifications written by Amane Tanaka are indicated in doc/fmuTemplate.diff.
>  * Copyright (c) 2016, Amane Tanaka
>  *  
>  * For original code
>  * ---------------------------------------------------------------------------*
23,24c38,46
<  * ---------------------------------------------------------------------------*/
< 
---
>  * ---------------------------------------------------------------------------
>  * 
>  * For modificateions
>  *  03.08.2016 initial vaersion
>  *    Removal of Euler steps of continuous variables and
>  *    addition of some function calls to communicate with external solvers
>  *    are made by Amanae Tanaka.  
>  * --------------------------------------------------------------------------*/
>  
168a191,193
> 	if (linkTerminate() != 1){
> 			return fmiError;
> 	}	
190a216
> 	linkFree();
436a463,467
> 	if ( linkConnect1() == 1){
> 		if ( linkInstantiate() ==1){
> 	
> 		}
> 	}		
489,495c520,521
<     double h = communicationStepSize / 10;
<     int k,i;
<     const int n = 10; // how many Euler steps to perform for one do step
<     double prevState[max(NUMBER_OF_STATES, 1)];
<     double prevEventIndicators[max(NUMBER_OF_EVENT_INDICATORS, 1)];
<     int stateEvent = 0;
< 
---
> 	int i;
> 	
510,517d535
< #if NUMBER_OF_EVENT_INDICATORS>0
<     // initialize previous event indicators with current values
<     for (i=0; i<NUMBER_OF_EVENT_INDICATORS; i++) {
<         prevEventIndicators[i] = getEventIndicator(comp, i);
<     }
< #endif
< 
<     // break the step into n steps and do forward Euler.
519,560c537,558
<     for (k=0; k<n; k++) {
<         comp->time += h;
< 
< #if NUMBER_OF_REALS>0
<         for (i=0; i<NUMBER_OF_STATES; i++) {
<             prevState[i] = r(vrStates[i]);
<         }
<         for (i=0; i<NUMBER_OF_STATES; i++) {
<             fmiValueReference vr = vrStates[i];
<             r(vr) += h * getReal(comp, vr+1); // forward Euler step
<         }
< #endif
< 
< #if NUMBER_OF_EVENT_INDICATORS>0
<         // check for state event
<         for (i=0; i<NUMBER_OF_EVENT_INDICATORS; i++) {
<             double ei = getEventIndicator(comp, i);
<             if (ei * prevEventIndicators[i] < 0) {
<                 if (comp->loggingOn) comp->functions.logger(c, comp->instanceName, fmiOK, "log", 
<                     "fmiDoStep: state event at %g, z%d crosses zero -%c-", comp->time, i, ei<0 ? '\\' : '/');
<                 stateEvent++;
<             }
<             prevEventIndicators[i] = ei;
<         }
<         if (stateEvent) {
<             eventUpdate(comp, &comp->eventInfo);
<             stateEvent = 0;
<         } 
< #endif
<         // check for time event
<         if (comp->eventInfo.upcomingTimeEvent && ((comp->time - comp->eventInfo.nextEventTime) > -0.0000000001)) {
<             if (comp->loggingOn) comp->functions.logger(c, comp->instanceName, fmiOK, "log",
<                 "fmiDoStep: time event detected at %g", comp->time);
<             eventUpdate(comp, &comp->eventInfo);
<         }
< 
<         // terminate simulation, if requested by the model
<         if (comp->eventInfo.terminateSimulation) {
<             comp->functions.logger(c, comp->instanceName, fmiOK, "log",
<               "fmiDoStep: model requested termination at t=%g", comp->time);
<             return fmiError; // enforce termination of the simulation loop
<         }
---
> 	
> 	// copy input data from fmu instance to input variables
> 	for (i=0; i < NUMBER_OF_REAL_INPUTS; i++){
> 		inputValue[i] = r(i);
> 	}
> 	
> 	if (linkDoStep(currentCommunicationPoint,  communicationStepSize) == 1){
> 		comp->time += communicationStepSize;
> 
> 		// copy output dat from output variables to fmu instance
> 		for (i = 0; i< NUMBER_OF_REAL_OUTPUTS; i++){
> 			r(n_offset+i) = outputValue[i];
> 		}
> 	} else {
> 		comp->eventInfo.terminateSimulation = fmiTrue;
> 	}
> 
>     // terminate simulation, if requested by the model
>     if (comp->eventInfo.terminateSimulation) {
>         comp->functions.logger(c, comp->instanceName, fmiOK, "log",
>         "fmiDoStep: model requested termination at t=%g", comp->time);
>         return fmiError; // enforce termination of the simulation loop
